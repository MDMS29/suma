                                                                  DISEÑO MODAL

<Dialog  visible={modalEliminar} style={{ width: '32rem' }} breakpoints={{ '960px': '75vw', '641px': '90vw' }} modal onHide={esconderModalEliminar} footer={deleteProductDialogFooter}>
            <div className="flex flex-col">
                <div className="flex justify-center pb-4">
                    <i className="pi pi-exclamation-triangle" style={{ fontSize: '5rem' }} />
                </div>
                <p className='text-2xl text-center'>
                    {eliminarUsuario.estado_usuario == "ACTIVO" ? "¿Estás seguro de que deseas inactivar este usuario?" : "¿Deseas restaurar este usuario?"}
                </p>
            </div>
            <div className="flex justify-center pt-4">
                <Button label="Cancelar" onClick={esconderModalEliminar} className='px-4 p-2 mx-2 rounded-md font-semibold 
            bg-neutralGray hover:bg-hoverGray transition duration-300 ease-in-out' />
                <Button label="Eliminar" onClick={clickEliminarUsuario} className="px-4 p-2 mx-2 rounded-md font-semibold
            bg-secundaryYellow hover:bg-primaryYellow transition duration-300 ease-in-out" />
            </div>
        </Dialog>

---------------------------------SELECT CON DROPDOWN Y NORMAL---------------------------------------------------------------------------------------------------------------------
<div className="flex">
                  <div>icon</div>
                  <select filter className="border-1 h-10 rounded-md px-2 py-2 border-gray-300">
                    <option disabled>-- Selecione un icono --</option>
                    {Array.isArray(iconos) && iconos.length > 0 ? (
                      iconos.map((e) => (
                        <option key={e.name} >
                          {e.description}, {e.link}
                        </option>
                      ))
                    ) : (
                      <option value="">No hay datos disponibles</option>
                    )}
                  </select>
                </div>

{/* <div className="flex items-center gap-2">
                <div className="card flex justify-content-center w-full">
                  <Dropdown
                    value={ModulosAgg.icono}
                    onChange={(e) => handleChangeModulos(e)}
                    options={
                      Array.isArray(iconos) && iconos.length > 0
                        ? iconos.map((e) => ({
                          label: e.description,
                          value: e.name,
                        }))
                        : [{ label: "No hay datos disponibles", value: "" }]
                    }
                    optionLabel="label"
                    optionValue="value"
                    placeholder="Seleccione un icono"
                    filter
                    name="icono"
                    className="w-full md:w-14rem h-10 rounded-lg"
                  />
                </div>
                <i className={`pi ${ModulosAgg?.icono} mx-3`}></i>
              </div> */}
------------------------------------------------------------------------------------------------------------------------------------------------------
import { Req_Icono } from "../../../components/Icons/Iconos";
import { InputText } from "primereact/inputtext";
import BLink from "../../../components/Botones/BLink";
import useRequisiciones from "../../../hooks/Compras/useRequisiciones"
import CardRequisicion from "../../../components/Cards/CardRequisicion";
import useAuth from "../../../hooks/useAuth";

const Requisiciones = () => {
  const { authUsuario } = useAuth()
  const { dataRequisiciones } = useRequisiciones();



  const main = () => (
    <div className="w-5/6">
      <div className="flex justify-center gap-x-4 m-2 p-3">
        <h1 className="text-3xl">Requisiciones</h1>
        {Req_Icono}
      </div>
      <div className="bg-white border my-3 p-3 rounded-sm w-full flex flex-wrap gap-3">
        {authUsuario.perfiles?.some((perfil) => perfil.id_perfil !== 46) &&
          <>
            <div className="h-full flex justify-center items-center">
              <BLink tipo={"PRINCIPAL"} url={"/compras/requisiciones/agregar"}>
                <i className="pi pi-plus mx-2 font-medium"></i>
                Agregar
              </BLink>
            </div>
            <div className="h-full flex justify-center items-center">
              <BLink url={"/compras/requisiciones/anuladas"} tipo={"INACTIVOS"}>
                Anulados
              </BLink>
            </div>
            <div className="h-full flex justify-center items-center">
              <BLink url={"/compras/requisiciones/aprobadas"} tipo={"APROBADO"}>
                Aprobados
              </BLink>
            </div>
          </>
        }

        {authUsuario.perfiles?.some((perfil) => perfil.id_perfil == 46) &&
          <>
            <div className="h-full flex justify-center items-center">
              <BLink url={"/compras/requisiciones/aprobadas"} tipo={"APROBADO"}>
                Revisados
              </BLink>
            </div>
            <div className="h-full flex justify-center items-center">
              <BLink url={"/compras/requisiciones/anuladas"} tipo={"INACTIVOS"}>
                Eliminados
              </BLink>
            </div>
          </>
        }

        <span className="p-input-icon-left sm:ml-auto md:ml-auto lg:ml-auto xl:ml-auto border rounded-md">
          <i className="pi pi-search" />
          <InputText className="h-10 pl-8 rounded-md" placeholder="Buscar" />
        </span>
      </div>

      <div className="bg-white border my-3 p-3 rounded-sm w-full flex flex-wrap gap-3">
        {dataRequisiciones.error === false ? (
          <p>No hay requisiciones pendientes</p>
        ) : (
          dataRequisiciones.map((requisiciones) => (
            <CardRequisicion requisiciones={requisiciones} />
          ))
        )}
      </div>

      {authUsuario.perfiles?.some((perfil) => perfil.id_perfil == 46) &&

        <div className="bg-white border my-3 p-3 rounded-sm w-full flex flex-wrap gap-3">
          {dataRequisiciones.error === false ? (
            <p>No hay requisiciones pendientes</p>
          ) : (
            dataRequisiciones.map((requisiciones) => (
              <BLink key={requisiciones} url={"/compras/requisiciones/revisar"} tipo={"APROBADO"}>
                <CardRequisicion requisiciones={requisiciones} />
              </BLink>
            ))
          )}
        </div>}

    </div>
  );
  return <>{main()}</>;
};

export default Requisiciones;
