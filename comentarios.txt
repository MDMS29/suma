diseño modal

<Dialog  visible={modalEliminar} style={{ width: '32rem' }} breakpoints={{ '960px': '75vw', '641px': '90vw' }} modal onHide={esconderModalEliminar} footer={deleteProductDialogFooter}>
            <div className="flex flex-col">
                <div className="flex justify-center pb-4">
                    <i className="pi pi-exclamation-triangle" style={{ fontSize: '5rem' }} />
                </div>
                <p className='text-2xl text-center'>
                    {eliminarUsuario.estado_usuario == "ACTIVO" ? "¿Estás seguro de que deseas inactivar este usuario?" : "¿Deseas restaurar este usuario?"}
                </p>
            </div>
            <div className="flex justify-center pt-4">
                <Button label="Cancelar" onClick={esconderModalEliminar} className='px-4 p-2 mx-2 rounded-md font-semibold 
            bg-neutralGray hover:bg-hoverGray transition duration-300 ease-in-out' />
                <Button label="Eliminar" onClick={clickEliminarUsuario} className="px-4 p-2 mx-2 rounded-md font-semibold
            bg-secundaryYellow hover:bg-primaryYellow transition duration-300 ease-in-out" />
            </div>
        </Dialog>

------------------------------------------------------PRUEBA DE LIBREIAS DE EXCEL------------------------------------------------------------------------------------------------
 
 1
 const descargar_excel = () => {
        const libro = XLSX.utils.book_new();
        const hoja = XLSX.utils.json_to_sheet(dataProductos);
        XLSX.utils.book_append_sheet(libro, hoja, "Productos");
        XLSX.writeFile(libro, "Productos.xlsx");
    }
2
     const exportExcel = () => {
         import('xlsx').then((xlsx) => {
             const worksheet = xlsx.utils.json_to_sheet(dataProductos);
             const workbook = { Sheets: { data: worksheet }, SheetNames: ['data'] };
             const excelBuffer = xlsx.write(workbook, {
                 bookType: 'xlsx',
                 type: 'array'
             });

             saveAsExcelFile(excelBuffer, 'products');
         });
     };

     const saveAsExcelFile = (buffer, fileName) => {
         import('file-saver').then((module) => {
             if (module && module.default) {
                 let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
                 let EXCEL_EXTENSION = '.xlsx';
                 const data = new Blob([buffer], {
                     type: EXCEL_TYPE
                 });

                 module.default.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);
             }
         });
     };

  3
import ExportExcel from 'react-export-excel';

    const ExcelFile = ExportExcel.ExcelFile;
    const ExcelSheet = ExportExcel.ExcelSheet;
    const ExcelColumn = ExportExcel.ExcelColumn;
                
                <ExcelFile element={<button type="button"><i className="pi pi-file-excel bg-green-500 rounded-md w-9 h-9 text-2xl flex items-center justify-center" ></i></button>} filename="Productos">
                    <ExcelSheet data={dataProductos} name="Datos">
                        <ExcelColumn label="Referencia" value="referencia" />
                        <ExcelColumn label="Nombre" value="nombre_producto" />
                        <ExcelColumn label="Marca" value="marca" />
                        <ExcelColumn label="Familia" value="nombre_familia" />
                        <ExcelColumn label="Tipo" value="tipo_producto" />
                        <ExcelColumn label="Unidad" value="unidad" />
                        <ExcelColumn label="Precio Costo" value="precio_costo" />
                        <ExcelColumn label="Precio Venta" value="precio_venta" />
                        <ExcelColumn label="Critico" value="critico_con" />
                        <ExcelColumn label="Inventariable" value="inventariable_con" />
                        <ExcelColumn label="Compuesto" value="compuesto_con" />
                        <ExcelColumn label="Ficha" value="ficha_con" />
                        <ExcelColumn label="Certificado" value="certificado_con" />
                    </ExcelSheet>
                </ExcelFile>

  4
  const columnasIncluidas = [
            'referencia',
            'descripcion',
            'id_marca',
            'id_familia',
            'id_tipo_producto',
            'id_unidad',
            'precio_costo',
            'precio_venta',
            'critico',
            'inventariable',
            'compuesto',
            'ficha',
            'certificado'
        ];
------------------------------------------------------------------------------------------------------------------------------------------------------
<div className="flex">
                  <div>icon</div>
                  <select filter className="border-1 h-10 rounded-md px-2 py-2 border-gray-300">
                    <option disabled>-- Selecione un icono --</option>
                    {Array.isArray(iconos) && iconos.length > 0 ? (
                      iconos.map((e) => (
                        <option key={e.name} >
                          {e.description}, {e.link}
                        </option>
                      ))
                    ) : (
                      <option value="">No hay datos disponibles</option>
                    )}
                  </select>
                </div>

------------------------------------------------------------------------------------------------------------------------------------------------------
{/* <div className="flex items-center gap-2">
                <div className="card flex justify-content-center w-full">
                  <Dropdown
                    value={ModulosAgg.icono}
                    onChange={(e) => handleChangeModulos(e)}
                    options={
                      Array.isArray(iconos) && iconos.length > 0
                        ? iconos.map((e) => ({
                          label: e.description,
                          value: e.name,
                        }))
                        : [{ label: "No hay datos disponibles", value: "" }]
                    }
                    optionLabel="label"
                    optionValue="value"
                    placeholder="Seleccione un icono"
                    filter
                    name="icono"
                    className="w-full md:w-14rem h-10 rounded-lg"
                  />
                </div>
                <i className={`pi ${ModulosAgg?.icono} mx-3`}></i>
              </div> */}
------------------------------------------------------------------------------------------------------------------------------------------------------

import { Menubar } from 'primereact/menubar';
import useAuth from "../hooks/useAuth.jsx";


export default function Navbar() {
    
    const { cerrar_salir, authModulos, open, setOpen } = useAuth();

    const customMenuItem = (item) => {
        return (
            <div className="custom-menu-item">
                {item.icon && <img src={item.icon} alt={item.label} className="menu-icon" />}
                <span className="menu-label">{item.label}</span>
            </div>
        );
    };

    const toggleSidebarAbierto = () => {
        setOpen(!open);
        authModulos.map(modulo => modulo.isOpen === true && !open ? modulo.isOpen = false : modulo.isOpen === true)
    };

    const items = [
        {
            label: 'File',
            icon: 'pi pi-fw pi-file',
            end: true,
            // className:"bg-black w-3",
            items: [
                {
                    label: 'Perfil',
                    icon: 'pi pi-user-edit',
                    // className:"bg-black w-3",
                },
                {
                    label: 'Salir',
                    icon: 'pi pi-sign-out',
                    command: (event) => cerrar_salir(event),
                    // className:"bg-black w-3",
                }
            ]
        }
    ];


    const start = (
        <div className='bg-slate-950 '>
            <button onClick={toggleSidebarAbierto}
                className="z-90 bottom-10 right-8 bg-primaryYellow w-10 h-10 rounded-lg flex justify-center items-center hover:bg-amber-500 duration-300"
            > <span className="pi pi-bars"></span></button>
        </div>)


    const end = (<div>
        <img
            src="https://img.freepik.com/vector-premium/avatar-hombre-sonriente-joven-hombre-bigote-barba-marron-cabello-sueter-amarillo-o-sudadera-ilustracion-personaje-personas-vector-3d-estilo-minimalista-dibujos-animados_365941-860.jpg?w=740"
            alt=""
            className="h-10 rounded-full"
        />

        <div onClick={cerrar_salir}>
            <i className="pi pi-sign-out"></i>
            <span className='ml-2'>SALIR</span>
        </div>
    </div>)

    return (
        <div className="card">
            <Menubar model={items} start={start} className='gap-3 flex justify-around max-md:mr-0' />
        </div>
    )
}
